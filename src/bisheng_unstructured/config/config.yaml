# 可根据loguru的文档配置不同 handlers
logger_conf:
  # 默认输出到控制台的日志级别, 大于等于此级别都会输出
  level: DEBUG
  # 默认输出格式
  format: '[{time:YYYY-MM-DD HH:mm:ss.SSSSSS}] [{level.name} process-{process.id}-{thread.id} {name}:{line}] - trace={extra[trace_id]} {message}'
  # 参考loguru.add()中的参数可以配置多个handler
  handlers:
      # 文件路径，支持插入一些系统环境变量，若环境变量不存在则置空。例如 HOSTNAME: 主机名。后端会处理环境变量的替换
    - sink: "/app/logs/bisheng_uns.log"
      # 日志级别
      level: INFO
#       和原生不一样，后端会将配置使用eval()执行转为函数用来过滤特定日志级别。推荐lambda
#      filter: "lambda record: record['level'].name == 'INFO'"
      # 日志格式化函数，extra内支持trace_id
      format: '[{time:YYYY-MM-DD HH:mm:ss.SSSSSS}] [{level.name} process-{process.id}-{thread.id} {name}:{line}] - trace={extra[trace_id]} {message}'
      # 每天的几点进行切割
      rotation: "00:00"
      retention: "3 Days"

# topdf 指令相关配置
topdf:
  # topdf 指令超时时间
  timeout: 60

# ocr 服务相关配置
is_all_ocr: false
