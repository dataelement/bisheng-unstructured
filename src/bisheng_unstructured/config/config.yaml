# 可根据loguru的文档配置不同 handlers
logger_conf:
  # 默认输出到控制台的日志级别, 大于等于此级别都会输出
  level: DEBUG
  # 默认输出格式
  format: '[{time:YYYY-MM-DD HH:mm:ss.SSSSSS}] [{level.name} process-{process.id}-{thread.id} {name}:{line}] - trace={extra[trace_id]} {message}'
  # 参考loguru.add()中的参数可以配置多个handler
  handlers:
      # 文件路径，支持插入一些系统环境变量，若环境变量不存在则置空。例如 HOSTNAME: 主机名。后端会处理环境变量的替换
    - sink: "/app/logs/bisheng_uns.log"
      # 日志级别
      level: INFO
#       和原生不一样，后端会将配置使用eval()执行转为函数用来过滤特定日志级别。推荐lambda
#      filter: "lambda record: record['level'].name == 'INFO'"
      # 日志格式化函数，extra内支持trace_id
      format: '[{time:YYYY-MM-DD HH:mm:ss.SSSSSS}] [{level.name} process-{process.id}-{thread.id} {name}:{line}] - trace={extra[trace_id]} {message}'
      # 每天的几点进行切割
      rotation: "00:00"
      retention: "3 Days"

# topdf 指令相关配置
topdf:
  # topdf 指令超时时间
  timeout: 60

etl4lm:
  # 文档解析模型服务配置，包括OCR、版式分析、表格识别、公式识别等
  url: "http://ocr:5000/ocr"
  # ocr 请求ocr服务超时时间
  timeout: 60
  # 是否开启公式识别
  enable_formula: true
  # # 是否强制使用OCR，false则由系统判断是否进行OCR识别，true则强制转成图片走OCR识别（适用于图文混合且需要识别图片中文字的场景）
  force_ocr: false
  # OCR SDK服务地址，默认为空则使用ETL4LM自带的轻量OCR模型（速度快，对于困难场景效果一般），若填写OCR SDK服务地址则使用高精度的OCR模型。
  ocr_sdk_url: ''
