kind: pipeline
name: cicd
type: docker

clone:
  disable: true

steps: # 定义流水线执行步骤，这些步骤将顺序执行
  - name: clone
    image: alpine/git
    pull: if-not-exists
    environment:
      http_proxy:
        from_secret: PROXY
      https_proxy:
        from_secret: PROXY
    commands:
      - git config --global core.compression 0
      - git clone https://github.com/dataelement/bisheng-unstructured.git .
      - git checkout $DRONE_COMMIT

  - name: build_docker_release
    pull: if-not-exists
    image: docker:24.0.6
    privileged: true
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: apt-cache
        path: /var/cache/apt/archives # 将应用打包好的Jar和执行脚本挂载出来
      - name: socket
        path: /var/run/docker.sock
    environment:
      http_proxy:
        from_secret: PROXY
      https_proxy:
        from_secret: PROXY
      no_proxy: 192.168.106.8
      version: release
      docker_repo: 192.168.106.8:6082/dataelement/bisheng-unstructured
      docker_registry: http://192.168.106.8:6082
      docker_user:
        from_secret: NEXUS_USER
      docker_password:
        from_secret: NEXUS_PASSWORD
    commands:
      - docker login -u $docker_user -p $docker_password $docker_registry
      - docker build -t $docker_repo:$version -f ./docker/Dockerfile .
      - docker push $docker_repo:$version
    when:
      status:
        - success
      branch:
        - release
      event:
        - push

  - name: build_docker
    pull: if-not-exists
    image: docker:24.0.6
    privileged: true
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: apt-cache
        path: /var/cache/apt/archives # 将应用打包好的Jar和执行脚本挂载出来
      - name: socket
        path: /var/run/docker.sock
    environment:
      http_proxy:
        from_secret: PROXY
      https_proxy:
        from_secret: PROXY
      no_proxy: 192.168.106.8,192.168.106.8
      version: ${DRONE_TAG}
      docker_repo: dataelement/bisheng-unstructured
      docker_user:
        from_secret: DOCKER_USER
      docker_password:
        from_secret: DOCKER_PASSWORD
      cr_user:
        from_secret: CR_USER
      cr_password:
        from_secret: CR_PASSWORD
      cr_repo_host: cr.dataelem.com
    commands:
      - docker login -u $cr_user -p $cr_password $cr_repo_host  # 登录官方镜像源
      - docker login -u $docker_user -p $docker_password  # 登录私有镜像源
      # 推送amd的镜像到cr镜像仓库
      - docker build -t $docker_repo:$version -t $docker_repo:latest -t $cr_repo_host/$docker_repo:$version -t $cr_repo_host/$docker_repo:latest -f ./docker/Dockerfile .
      - docker push $docker_repo:$version
      - docker push $cr_repo_host/$docker_repo:$version
      - docker push $docker_repo:latest
      - docker push $cr_repo_host/$docker_repo:latest
    when:
      status:
        - success
      ref:
        - refs/tags/v*

volumes:
  - name: bisheng-cache
    host:
      path: /opt/drone/data/bisheng/
  - name: apt-cache
    host:
      path: /opt/drone/data/bisheng/apt/
  - name: socket
    host:
      path: /var/run/docker.sock



---
kind: pipeline
type: docker
name: unstructured-arm 

clone:
  disable: true

platform:
  os: linux
  arch: arm64

steps:
  - name: clone
    image: alpine/git
    pull: if-not-exists
    environment:
      http_proxy:
        from_secret: PROXY
      https_proxy:
        from_secret: PROXY
    commands:
      - git config --global core.compression 0
      - git clone https://github.com/dataelement/bisheng-unstructured.git .
      - git checkout $DRONE_COMMIT



  - name: build_docker_release
    pull: if-not-exists
    image: docker:24.0.6
    privileged: true
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: apt-cache
        path: /var/cache/apt/archives # 将应用打包好的Jar和执行脚本挂载出来
      - name: socket
        path: /var/run/docker.sock
    environment:
      http_proxy:
        from_secret: PROXY
      https_proxy:
        from_secret: PROXY
      no_proxy: 192.168.106.8
      version: release
      docker_repo: 192.168.106.8:6082/dataelement/bisheng-unstructured-arm
      docker_registry: http://192.168.106.8:6082
      docker_user:
        from_secret: NEXUS_USER
      docker_password:
        from_secret: NEXUS_PASSWORD
    commands:
      - docker login -u $docker_user -p $docker_password $docker_registry
      - docker buildx build --push -t $docker_repo:$version -f ./docker/Dockerfile-arm .
    when:
      status:
        - success
      branch:
        - release
      event:
        - push


  - name: build_docker
    pull: if-not-exists
    image: docker:24.0.6
    privileged: true
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: apt-cache
        path: /var/cache/apt/archives # 将应用打包好的Jar和执行脚本挂载出来
      - name: socket
        path: /var/run/docker.sock
    environment:
      http_proxy:
        from_secret: PROXY
      https_proxy:
        from_secret: PROXY
      no_proxy: 192.168.106.8,192.168.106.8
      #version: ${DRONE_TAG}
      version: v0.1
      docker_repo: dataelement/bisheng-unstructured-arm
      docker_user:
        from_secret: DOCKER_USER
      docker_password:
        from_secret: DOCKER_PASSWORD
      cr_user:
        from_secret: CR_USER
      cr_password:
        from_secret: CR_PASSWORD
      cr_repo_host: cr.dataelem.com
    commands:
      - docker login -u $cr_user -p $cr_password $cr_repo_host  # 登录官方镜像源
      - docker login -u $docker_user -p $docker_password  # 登录私有镜像源
      # 推送amd的镜像到cr镜像仓库
      - docker buildx build --load -t $docker_repo:$version -t $docker_repo:latest -t $cr_repo_host/$docker_repo:$version -t $cr_repo_host/$docker_repo:latest -f ./docker/Dockerfile-arm .
      #- docker push $docker_repo:$version
      # - docker push $cr_repo_host/$docker_repo:$version
      # - docker push $docker_repo:latest
      # - docker push $cr_repo_host/$docker_repo:latest
    when:
      status:
        - success
      ref:
        - refs/tags/v*

volumes:
  - name: bisheng-cache
    host:
      path: /opt/drone/data/bisheng/
  - name: apt-cache
    host:
      path: /opt/drone/data/bisheng/apt/
  - name: socket
    host:
      path: /var/run/docker.sock
